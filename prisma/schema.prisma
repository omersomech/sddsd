// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}
model Customer {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
    environments  Environment[]
    @@index([name])
}

model Environment {
    id        Int      @id @default(autoincrement())
    name      String
    rights_ui    String
    rights_server   String
    gw_ui       String
    gw_server   String
    db2     String
    mongodb String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    customer   Customer  @relation(fields: [customerId], references: [id])
    customerId Int
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.VarChar(3000)
    access_token      String? @db.VarChar(3000)
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.VarChar(2000)
    session_state     String?
    ext_expires_in   Int?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?  @db.VarChar(2000)
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    environments  Environment[]
    customers     Customer[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
